pipeline {
    agent any

    environment {
        BACKEND_IMAGE = 'ilyassepro/unique-backend'
        FRONTEND_IMAGE = 'ilyassepro/unique-frontend'
        DOCKER_TAG = "2.0"                              // Tag for both backend and frontend images
        KUBECONFIG = credentials('Kube config')         // Kubernetes config credential ID
        DRY_RUN = 'true'                                // Set to 'true' for testing without actual execution
    }

    stages {
        stage('Debug DRY_RUN') {
            steps {
                echo "DRY_RUN is set to: ${env.DRY_RUN}"
            }
        }

        stage('Test Slack Notification') {
            steps {
                echo 'Testing Slack Notification...'
                slackSend(
                    channel: '#pipeline',
                    color: 'good',
                    message: "This is a test message from Jenkins Pipeline. DRY_RUN = ${env.DRY_RUN}",
                    tokenCredentialId: 'Slack-webhook'
                )
            }
        }

        stage('Checkout') {
            when {
                expression { env.DRY_RUN != 'true' } // Skip if DRY_RUN is 'true'
            }
            steps {
                echo 'Cloning repository...'
                checkout scm
            }
        }

        stage('Install Dependencies') {
            when {
                expression { env.DRY_RUN != 'true' } // Skip if DRY_RUN is 'true'
            }
            steps {
                echo 'Installing dependencies...'
                sh '''
                    cd backend
                    npm install
                    cd ../frontend
                    npm install
                '''
            }
        }

        stage('Run Tests') {
            when {
                expression { env.DRY_RUN != 'true' } // Skip if DRY_RUN is 'true'
            }
            steps {
                echo 'Running tests...'
                sh '''
                    cd backend
                    npm test || echo "Backend tests failed!"
                    cd ../frontend
                    npm test || echo "Frontend tests failed!"
                '''
            }
        }

        stage('Build Backend Image') {
            when {
                expression { env.DRY_RUN != 'true' } // Skip if DRY_RUN is 'true'
            }
            steps {
                echo 'Building backend Docker image...'
                script {
                    docker.build("${BACKEND_IMAGE}:${DOCKER_TAG}", "backend/.")
                }
            }
        }

        stage('Build Frontend Image') {
            when {
                expression { env.DRY_RUN != 'true' } // Skip if DRY_RUN is 'true'
            }
            steps {
                echo 'Building frontend Docker image...'
                script {
                    docker.build("${FRONTEND_IMAGE}:${DOCKER_TAG}", "frontend/.")
                }
            }
        }

        stage('Push Backend Image') {
            when {
                expression { env.DRY_RUN != 'true' } // Skip if DRY_RUN is 'true'
            }
            steps {
                echo 'Pushing backend Docker image to Docker Hub...'
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'Credentials for dockerhub') {
                        docker.image("${BACKEND_IMAGE}:${DOCKER_TAG}").push()
                    }
                }
            }
        }

        stage('Push Frontend Image') {
            when {
                expression { env.DRY_RUN != 'true' } // Skip if DRY_RUN is 'true'
            }
            steps {
                echo 'Pushing frontend Docker image to Docker Hub...'
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'Credentials for dockerhub') {
                        docker.image("${FRONTEND_IMAGE}:${DOCKER_TAG}").push()
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            when {
                expression { env.DRY_RUN != 'true' } // Skip if DRY_RUN is 'true'
            }
            steps {
                echo 'Deploying backend and frontend to Kubernetes...'
                sh """
                    # Ensure namespace exists
                    kubectl create namespace todo-app --dry-run=client -o yaml | kubectl apply -f -

                    # Deploy backend
                    helm upgrade --install backend ./helm/backend \
                        --namespace todo-app \
                        --set image.repository=${BACKEND_IMAGE} \
                        --set image.tag=${DOCKER_TAG} \
                        --wait

                    # Deploy frontend
                    helm upgrade --install frontend ./helm/frontend \
                        --namespace todo-app \
                        --set image.repository=${FRONTEND_IMAGE} \
                        --set image.tag=${DOCKER_TAG} \
                        --wait
                """
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            deleteDir() // Cleanup workspace to ensure a fresh start for the next build
        }
        success {
            echo 'Pipeline succeeded!'
            slackSend(
                channel: '#pipeline',
                color: 'good',
                message: """
                    üéâ Pipeline succeeded! üéâ
                    - Backend Image: ${BACKEND_IMAGE}:${DOCKER_TAG}
                    - Frontend Image: ${FRONTEND_IMAGE}:${DOCKER_TAG}
                """,
                tokenCredentialId: 'Slack-webhook'
            )
        }
        failure {
            echo 'Pipeline failed!'
            slackSend(
                channel: '#pipeline',
                color: 'danger',
                message: """
                    ‚ùå Pipeline failed! ‚ùå
                    - Check logs: ${BUILD_URL}
                """,
                tokenCredentialId: 'Slack-webhook'
            )
        }
    }
}
