pipeline {
   agent any

   environment {
       // Images et repos
       BACKEND_IMAGE = 'ilyassepro/unique-backend'
       FRONTEND_IMAGE = 'ilyassepro/unique-frontend'
       GITHUB_REPO = "https://github.com/ilyasse027/todo-app.git"
       
       // Versions
       BACKEND_VERSION_BASE = '3.3'
       FRONTEND_VERSION_BASE = '2.2'
       BUILD_NUMBER = "${env.BUILD_NUMBER}"
       BACKEND_TAG = "${BACKEND_VERSION_BASE}.${BUILD_NUMBER}"
       FRONTEND_TAG = "${FRONTEND_VERSION_BASE}.${BUILD_NUMBER}"
       
       // Credentials
       KUBECONFIG = credentials('Kube config')
       DOCKER_CREDENTIALS_ID = "Credentials for dockerhub"
       TRIVY_CREDENTIALS_ID = "PAT for trivy"
       GITHUB_TOKEN = credentials('github-token')
       ARGOCD_CREDENTIALS_ID = 'argocd-admin-password'
       
       // Autres configurations
       DRY_RUN = 'false'
       K8S_REPO_PATH = "${WORKSPACE}/todo-app/todo-app-chart"
       TRIVY_CACHE_DIR = "${WORKSPACE}/.trivycache"
       TRIVY_SKIP_DB_UPDATE = 'true'
   }
   
   stages {
       stage('Cleanup Workspace') {
           steps {
               cleanWs()
           }
       }

       
        

       stage('Checkout') {
           when {
               expression { env.DRY_RUN != 'true' }
           }
           steps {
               echo 'Cloning repository...'
               checkout scm
           }
       }

       stage('Verify Environment') {
           steps {
               bat '''
                   echo "Checking environment..."
                   node --version
                   npm --version
                   docker --version
                   helm version
               '''
           }
       }

       stage('Prepare Trivy') {
            steps {
                bat """
                    if not exist "%WORKSPACE%\\.trivycache" mkdir "%WORKSPACE%\\.trivycache"

                """
            }
        }

       stage('Install Dependencies') {
           when {
               expression { env.DRY_RUN != 'true' }
           }
           steps {
               echo 'Installing dependencies...'
               bat """
                   cd backend
                   npm ci
                   cd ../frontend
                   npm ci
               """
           }
       }

       stage('Run Tests') {
           when {
               expression { env.DRY_RUN != 'true' }
           }
           steps {
               echo 'Running Jest tests...'
               bat """
                   cd backend
                   npm test || echo "Backend tests failed!"
                   cd ../frontend
                   npm test || echo "Frontend tests failed!"
               """
           }
       }

       stage('Clone Helm Chart Repository') {
            steps {
                script {
                    try {
                        // Create parent directory first
                        bat """
                            mkdir "${WORKSPACE}\\todo-app" 2>NUL || echo "Parent directory exists"
                            mkdir "${K8S_REPO_PATH}" 2>NUL || echo "Chart directory exists"
                            echo "Created directories"
                            dir
                        """
            
                        dir("${K8S_REPO_PATH}") {
                            // Clean any existing content
                            bat "if exist * del /F /Q *"
                
                            // Clone only the todo-app-chart directory
                            checkout([
                                $class: 'GitSCM',
                                branches: [[name: '*/main']],
                                extensions: [
                                    [$class: 'SparseCheckoutPaths',
                                    sparseCheckoutPaths: [[path: 'todo-app-chart/']]],
                                    [$class: 'RelativeTargetDirectory', 
                                    relativeTargetDir: '.']
                                ],
                                userRemoteConfigs: [[
                                    url: "${GITHUB_REPO}",
                                    credentialsId: 'github-token'
                                ]]
                            ])
                
                            // Verify clone was successful and files exist
                            bat """
                                echo "Directory contents after clone:"
                                dir /s
                        
                                rem Check if values.yaml exists after moving files
                                if exist todo-app-chart\\values.yaml (
                                    move todo-app-chart\\* .
                                    rd /s /q todo-app-chart
                                ) else (
                                    echo "values.yaml not found in cloned repository"
                                    exit 1
                                )
                            """
                        }
                    } catch (Exception e) {
                        echo "Failed to clone Helm chart repository: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error "Clone stage failed"
                    }
                }
            }
        }


       stage('Docker Login') {
           steps {
               withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", 
                   usernameVariable: 'DOCKER_USER', 
                   passwordVariable: 'DOCKER_PASS')]) {
                   bat "docker login -u %DOCKER_USER% -p %DOCKER_PASS%"
               }
           }
       }

       stage('Build Docker Images') {
           when {
               expression { env.DRY_RUN != 'true' }
           }
           steps {
               parallel(
                   backend: {
                       echo "Building backend Docker image with tag ${BACKEND_TAG}..."
                       script {
                           docker.build("${BACKEND_IMAGE}:${BACKEND_TAG}", "backend/.")
                       }
                   },
                   frontend: {
                       echo "Building frontend Docker image with tag ${FRONTEND_TAG}..."
                       script {
                           docker.build("${FRONTEND_IMAGE}:${FRONTEND_TAG}", "frontend/.")
                       }
                   }
               )
           }
       }

       stage('Scan Docker Images') {
            steps {
                script {
                    // First, ensure the environment variable is cleared
                    bat 'set TRIVY_SKIP_DB_UPDATE='
                    
                    bat """
                        echo "Initializing Trivy and scanning Backend..."
                        trivy image --no-progress --exit-code 0 --severity HIGH,CRITICAL %BACKEND_IMAGE%:%BACKEND_TAG% || echo "Backend scan completed with findings"
                        
                        ping -n 3 127.0.0.1 > nul
                        
                        echo "Scanning Frontend..."
                        trivy image --no-progress --exit-code 0 --severity HIGH,CRITICAL %FRONTEND_IMAGE%:%FRONTEND_TAG% || echo "Frontend scan completed with findings"
                    """
                }
            }
        }
       stage('Push Docker Images') {
           steps {
               script {
                   bat """
                       docker tag ${BACKEND_IMAGE}:${BACKEND_TAG} ${BACKEND_IMAGE}:latest
                       docker push ${BACKEND_IMAGE}:${BACKEND_TAG}
                       docker push ${BACKEND_IMAGE}:latest
                   """

                   bat """
                       docker tag ${FRONTEND_IMAGE}:${FRONTEND_TAG} ${FRONTEND_IMAGE}:latest
                       docker push ${FRONTEND_IMAGE}:${FRONTEND_TAG}
                       docker push ${FRONTEND_IMAGE}:latest
                   """
               }
           }
       }

       stage('Setup ArgoCD') {
            steps {
                script {
                    try {
                        bat """
                            kubectl get namespace argocd || kubectl create namespace argocd
                            kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
                            kubectl wait --for=condition=available deployment -l "app.kubernetes.io/name=argocd-server" -n argocd --timeout=300s

                        """
                        withCredentials([string(credentialsId: 'argocd-admin-password', variable: 'ARGOCD_ADMIN_PASSWORD')]) {
                            bat """
                                helm upgrade --install argocd-config "%K8S_REPO_PATH%" ^
                                --namespace argocd ^
                                --set argocd.enabled=true ^
                                --set-string argocd.config.admin.password="%ARGOCD_ADMIN_PASSWORD%" ^
                                --wait ^
                                --timeout 5m
                            """
                        }
                    } catch (Exception e) {
                        echo "ArgoCD setup error: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error "ArgoCD setup failed"
                    }
                }
            }
        }

       

   post {
       always {
           bat """
               docker logout
               docker rmi ${BACKEND_IMAGE}:${BACKEND_TAG} 2>NUL || echo "Removing backend tag"
                docker rmi ${BACKEND_IMAGE}:latest 2>NUL || echo "Removing backend latest"
                docker rmi ${FRONTEND_IMAGE}:${FRONTEND_TAG} 2>NUL || echo "Removing frontend tag"
                docker rmi ${FRONTEND_IMAGE}:latest 2>NUL || echo "Removing frontend latest"
           """
           cleanWs()
       }
       success {
           echo "Pipeline completed successfully! Deployed version: Backend ${BACKEND_TAG}, Frontend ${FRONTEND_TAG}"
       }
       failure {
           echo 'Pipeline failed! Check the logs for details.'
       }
   }
}