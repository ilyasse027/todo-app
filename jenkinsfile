pipeline {
    agent any

    environment {
        // Images et repos
        BACKEND_IMAGE = 'ilyassepro/unique-backend'
        FRONTEND_IMAGE = 'ilyassepro/unique-frontend'
        GITHUB_REPO = "https://github.com/ilyasse027/todo-app.git"
        
        // Versions
        BACKEND_VERSION_BASE = '3.3'
        FRONTEND_VERSION_BASE = '2.2'
        BUILD_NUMBER = "${env.BUILD_NUMBER}"
        BACKEND_TAG = "${BACKEND_VERSION_BASE}.${BUILD_NUMBER}"
        FRONTEND_TAG = "${FRONTEND_VERSION_BASE}.${BUILD_NUMBER}"
        
        // Credentials
        GITHUB_CREDS = credentials('Credentials for GIT')
        DOCKER_CREDENTIALS_ID = "Credentials for dockerhub"
        KUBECONFIG = credentials('Kube config')
        TRIVY_CREDENTIALS_ID = "PAT for trivy"
    }

    stages {
        stage('Cleanup Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                echo 'Cloning repository...'
                checkout scm
            }
        }

        stage('Verify Environment') {
            steps {
                bat '''
                    echo "Checking environment..."
                    node --version
                    npm --version
                    docker --version
                    helm version
                '''
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'Installing dependencies...'
                bat """
                    cd backend
                    npm ci
                    cd ../frontend
                    npm ci
                """
            }
        }

        stage('Run Tests') {
            steps {
                echo 'Running Jest tests...'
                bat """
                    cd backend
                    npm test || echo "Backend tests failed!"
                    cd ../frontend
                    npm test || echo "Frontend tests failed!"
                """
            }
        }

        stage('Clone Helm Chart Repository') {
            steps {
                dir("${WORKSPACE}/todo-app-chart") {
                    git branch: 'main', 
                        credentialsId: 'Credentials for GIT',
                        url: "${GITHUB_REPO}"
                }
            }
        }

        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Credentials for dockerhub', 
                    usernameVariable: 'DOCKER_USER', 
                    passwordVariable: 'DOCKER_PASS')]) {
                    bat "docker login -u %DOCKER_USER% -p %DOCKER_PASS%"
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    docker.build("${BACKEND_IMAGE}:${BACKEND_TAG}", "backend/.")
                    docker.build("${FRONTEND_IMAGE}:${FRONTEND_TAG}", "frontend/.")
                }
            }
        }

        stage('Scan Docker Images') {
            steps {
                bat """
                    trivy image --db-repository ghcr.io/aquasecurity/trivy-db:2 --exit-code 1 --severity CRITICAL,HIGH %BACKEND_IMAGE%:%BACKEND_TAG% || echo "Backend image has vulnerabilities!"
                    trivy image --db-repository ghcr.io/aquasecurity/trivy-db:2 --exit-code 1 --severity CRITICAL,HIGH %FRONTEND_IMAGE%:%FRONTEND_TAG% || echo "Frontend image has vulnerabilities!"
                """
            }
        }

        stage('Push Docker Images') {
            steps {
                bat """
                    docker tag ${BACKEND_IMAGE}:${BACKEND_TAG} ${BACKEND_IMAGE}:latest
                    docker push ${BACKEND_IMAGE}:${BACKEND_TAG}
                    docker push ${BACKEND_IMAGE}:latest
                    
                    docker tag ${FRONTEND_IMAGE}:${FRONTEND_TAG} ${FRONTEND_IMAGE}:latest
                    docker push ${FRONTEND_IMAGE}:${FRONTEND_TAG}
                    docker push ${FRONTEND_IMAGE}:latest
                """
            }
        }

        stage('Update Helm Values and Push') {
            steps {
                dir("${WORKSPACE}/todo-app-chart") {
                    script {
                        def valuesPath = "values.yaml"
                        def valuesContent = readFile(valuesPath)
                        valuesContent = valuesContent.replaceAll(
                            "backend:\\n\\s+image: \"${BACKEND_IMAGE}:.*\"", 
                            "backend:\\n  image: \"${BACKEND_IMAGE}:${BACKEND_TAG}\""
                        )
                        valuesContent = valuesContent.replaceAll(
                            "frontend:\\n\\s+image: \"${FRONTEND_IMAGE}:.*\"", 
                            "frontend:\\n  image: \"${FRONTEND_IMAGE}:${FRONTEND_TAG}\""
                        )
                        writeFile file: valuesPath, text: valuesContent

                        withCredentials([usernamePassword(credentialsId: 'Credentials for GIT', 
                            usernameVariable: 'GIT_USERNAME', 
                            passwordVariable: 'GIT_PASSWORD')]) {
                            bat """
                                git config user.name "Ilyasse"
                                git config user.email "ilyasse.taoufik@ynov.com"
                                git add values.yaml
                                git commit -m "Update image tags to backend:${BACKEND_TAG}, frontend:${FRONTEND_TAG}" || echo "Nothing to commit"
                                git push https://%GIT_USERNAME%:%GIT_PASSWORD%@github.com/ilyasse027/todo-app.git main
                            """
                        }
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                bat """
                    helm upgrade --install todo-app ${WORKSPACE}/todo-app-chart/todo-app-chart --namespace todo-app --set backend.image=${BACKEND_IMAGE}:${BACKEND_TAG} --set frontend.image=${FRONTEND_IMAGE}:${FRONTEND_TAG} --wait --timeout 10m0s || echo "Error deploying applications"
                """
            }
        }
    }

    post {
        always {
            script {
                bat """
                    docker logout
                    docker rmi ${BACKEND_IMAGE}:${BACKEND_TAG} || true
                    docker rmi ${BACKEND_IMAGE}:latest || true
                    docker rmi ${FRONTEND_IMAGE}:${FRONTEND_TAG} || true
                    docker rmi ${FRONTEND_IMAGE}:latest || true
                """
            }
            cleanWs()
        }
        success {
            echo "Pipeline completed successfully! Deployed version: Backend ${BACKEND_TAG}, Frontend ${FRONTEND_TAG}"
        }
        failure {
            echo 'Pipeline failed! Check the logs for details.'
        }
    }
}