pipeline {
    agent any

    environment {
        BACKEND_IMAGE = 'ilyassepro/unique-backend'
        FRONTEND_IMAGE = 'ilyassepro/unique-frontend'
        BACKEND_TAG = "2.4"                             // Tag for the backend image
        FRONTEND_TAG = "2.2"                            // Tag for the frontend image
        KUBECONFIG = credentials('Kube config')         // Kubernetes config credential ID
        DRY_RUN = 'false'                               // Set to 'true' for testing without actual execution
    }

    stages {
        stage('Checkout') {
            when {
                expression { env.DRY_RUN != 'true' }
            }
            steps {
                echo 'Cloning repository...'
                checkout scm
            }
        }

        stage('Install Dependencies') {
            when {
                expression { env.DRY_RUN != 'true' }
            }
            steps {
                echo 'Installing dependencies...'
                bat """
                    cd backend
                    npm ci
                    cd ../frontend
                    npm ci
                """
            }
        }

        stage('Run Tests') {
            when {
                expression { env.DRY_RUN != 'true' }
            }
            steps {
                echo 'Running Jest tests...'
                bat """
                    cd backend
                    npm test || echo "Backend tests failed!"
                    cd ../frontend
                    npm test || echo "Frontend tests failed!"
                """
            }
        }

        stage('Build Docker Images') {
            when {
                expression { env.DRY_RUN != 'true' }
            }
            steps {
                parallel(
                    backend: {
                        echo 'Building backend Docker image...'
                        script {
                            docker.build("${BACKEND_IMAGE}:${BACKEND_TAG}", "backend/.")
                        }
                    },
                    frontend: {
                        echo 'Building frontend Docker image...'
                        script {
                            docker.build("${FRONTEND_IMAGE}:${FRONTEND_TAG}", "frontend/.")
                        }
                    }
                )
            }
        }

        stage('Scan Docker Images with Trivy') {
            parallel {
                stage('Scan Backend Image') {
                    steps {
                        echo 'Scanning Backend Image...'
                        bat """
                            trivy image --db-repository ghcr.io/aquasecurity/trivy-db:2 --exit-code 1 --severity CRITICAL,HIGH %BACKEND_IMAGE%:%BACKEND_TAG% || echo "Backend image has vulnerabilities!"
                        """
                    }
                }
                stage('Scan Frontend Image') {
                    steps {
                        echo 'Scanning Frontend Image...'
                        bat """
                            trivy image --db-repository ghcr.io/aquasecurity/trivy-db:2 --exit-code 1 --severity CRITICAL,HIGH %FRONTEND_IMAGE%:%FRONTEND_TAG% || echo "Frontend image has vulnerabilities!"
                        """
                    }
                }
            }
        }

        stage('Push Docker Images') {
            when {
                expression { env.DRY_RUN != 'true' }
            }
            steps {
                parallel(
                    pushBackend: {
                        echo 'Pushing backend Docker image to Docker Hub...'
                        script {
                            docker.withRegistry('https://registry.hub.docker.com', 'Credentials for dockerhub') {
                                docker.image("${BACKEND_IMAGE}:${BACKEND_TAG}").push()
                            }
                        }
                    },
                    pushFrontend: {
                        echo 'Pushing frontend Docker image to Docker Hub...'
                        script {
                            docker.withRegistry('https://registry.hub.docker.com', 'Credentials for dockerhub') {
                                docker.image("${FRONTEND_IMAGE}:${FRONTEND_TAG}").push()
                            }
                        }
                    }
                )
            }
        }

        stage('Deploy to Kubernetes') {
            when {
                expression { env.DRY_RUN != 'true' }
            }
            steps {
                echo 'Deploying backend and frontend to Kubernetes...'
                bat """
                    helm upgrade --install todo-app D:/Projects/todo-app/todo-app-chart \
                    --namespace todo-app \
                    --set backend.image=${BACKEND_IMAGE}:${BACKEND_TAG} \
                    --set frontend.image=${FRONTEND_IMAGE}:${FRONTEND_TAG} \
                    --wait --timeout 10m0s || echo "Error deploying applications"
                """
            }
        }

        stage('Scan Kubernetes Deployments with Trivy') {
            steps {
                echo 'Scanning Kubernetes deployments...'
                bat """
                    trivy image --download-db-only || echo "Failed to download Trivy database!"
                    trivy k8s --db-repository ghcr.io/aquasecurity/trivy-db:2 --exit-code 1 --severity CRITICAL,HIGH --include-namespaces todo-app -o C:/Reports/trivy_report.json -f json || echo "Kubernetes deployments have vulnerabilities!"
                """
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            deleteDir()
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
